{"ast":null,"code":"import { InjectionToken, NgModule } from '@angular/core';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * A storage service implementation that is used as a proxy for another storage service. This is used to create storage services with a\r\n * different default transcoder.\r\n * @template T\r\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nclass ProxyStorageService {\n  /**\r\n   * Creates a new `ProxyStorageService` instance that uses the specified transcoder by default for read and write operations. Actual\r\n   * read and writes are delegated to given storage service.\r\n   *\r\n   * @param {?} defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\r\n   * @param {?} subject           Storage service which should handle to actual storage of data.\r\n   */\n  constructor(defaultTranscoder, subject) {\n    this.defaultTranscoder = defaultTranscoder;\n    this.subject = subject;\n  }\n  /**\r\n   * Checks whether an entry with the specified key exists in the storage.\r\n   *\r\n   * @param {?} key Identifier of the entry for which its presence in the storage is to be checked.\r\n   * @return {?} `true` if an entry with the specified key exists in the storage, `false` if not.\r\n   */\n\n\n  has(key) {\n    return this.subject.has(key);\n  }\n  /*\r\n       * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\r\n       * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\r\n       * `undefined` will be returned.\r\n       *\r\n       * @param   key     Identifier of the entry whose value is to be retrieved.\r\n       * @param   decoder Decoder to use for converting the stored value to the desired return type.\r\n       * @returns         Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\r\n       *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\r\n       */\n\n  /**\r\n   * @param {?} key\r\n   * @param {?=} decoder\r\n   * @return {?}\r\n   */\n\n\n  get(key, decoder) {\n    return this.subject.get(key, decoder || this.defaultTranscoder);\n  }\n  /**\r\n   * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\r\n   * value into a format that can be stored by the storage service's underlying storage.\r\n   *\r\n   * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\r\n   * the value will be the same. It, however, does not necessarily return the same reference.\r\n   *\r\n   * @param {?} key     Identifier of the entry which is to be created or updated.\r\n   * @param {?} value   Value which is to be stored.\r\n   * @param {?=} encoder Encoder used to convert the given value into a format that can be used for storage.\r\n   * @return {?}\r\n   */\n\n\n  set(key, value, encoder) {\n    this.subject.set(key, value, encoder || this.defaultTranscoder);\n  }\n  /**\r\n   * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\r\n   * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\r\n   *\r\n   * @param {?} key Identifier of the entry which is to be removed.\r\n   * @return {?}\r\n   */\n\n\n  remove(key) {\n    this.subject.remove(key);\n  }\n  /**\r\n   * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\r\n   * for key *x*.\r\n   * @return {?}\r\n   */\n\n\n  clear() {\n    this.subject.clear();\n  }\n  /**\r\n   * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\r\n   * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\r\n   * the same data.\r\n   *\r\n   * The default transcoder will not be changed for the storage service on which this function is invoked.\r\n   *\r\n   * @template X\r\n   * @param {?} transcoder Transcoder that should be used by default for read and write operations by the new storage service.\r\n   * @return {?} A new storage service that uses the specified transcoder by default.\r\n   */\n\n\n  withDefaultTranscoder(transcoder) {\n    return new ProxyStorageService(transcoder, this.subject);\n  }\n\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * Base implementation for storage services.\r\n * @abstract\r\n * @template T\r\n */\n\n\nclass BaseStorageService {\n  /**\r\n   * Creates a new `BaseStorageService` that uses the specified transcoder by default for read and write operations.\r\n   *\r\n   * @param {?} defaultTranscoder Transcoder which is to be used by default for storage read and write operations.\r\n   */\n  constructor(defaultTranscoder) {\n    this.defaultTranscoder = defaultTranscoder;\n  }\n  /**\r\n   * Retrieves the value stored for the entry that is associated with the specified key. The given decoder is used to convert the stored\r\n   * value to the desired type. If no entry for the specified key exists or if the decoder is unable to decode the stored value, then\r\n   * `undefined` will be returned.\r\n   *\r\n   * @param {?} key     Identifier of the entry whose value is to be retrieved.\r\n   * @param {?=} decoder Decoder to use for converting the stored value to the desired return type.\r\n   * @return {?} Value of the entry that is identified by the specified key. In case the entry does not exist or if it cannot be\r\n   *                  loaded (due to a decoding issue), then `undefined` will be returned by this function.\r\n   */\n\n\n  get(key, decoder) {\n    /** @type {?} */\n    const value = this.getItem(key);\n    return value !== undefined ? (decoder || this.defaultTranscoder).decode(value) : undefined;\n  }\n  /**\r\n   * Creates or updates the entry identified by the specified key with the given value. The specified encoder is used to convert the given\r\n   * value into a format that can be stored by the storage service's underlying storage.\r\n   *\r\n   * Storing a value into the storage service will ensure that an equivalent of the value can be read back, i.e. the data and structure of\r\n   * the value will be the same. It, however, does not necessarily return the same reference.\r\n   *\r\n   * @param {?} key     Identifier of the entry which is to be created or updated.\r\n   * @param {?} value   Value which is to be stored.\r\n   * @param {?=} encoder Encoder used to convert the given value into a format that can be used for storage.\r\n   * @return {?}\r\n   */\n\n\n  set(key, value, encoder) {\n    this.setItem(key, (encoder || this.defaultTranscoder).encode(value));\n  }\n  /**\r\n   * Creates a new storage service that uses the specified transcoder by default for read and write operations. The new storage service\r\n   * uses the storage service on which this function is invoked as underlying storage. Both storage services will thus be able to access\r\n   * the same data.\r\n   *\r\n   * The default transcoder will not be changed for the storage service on which this function is invoked.\r\n   *\r\n   * @template X\r\n   * @param {?} transcoder Transcoder that should be used by default for read and write operations by the new storage service.\r\n   * @return {?} A new storage service that uses the specified transcoder by default.\r\n   */\n\n\n  withDefaultTranscoder(transcoder) {\n    return new ProxyStorageService(transcoder, this);\n  }\n\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * Transcoder that encodes values as JSON strings.\r\n */\n\n\nclass JsonStorageTranscoder {\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  encode(value) {\n    return JSON.stringify(value);\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n\n\n  decode(value) {\n    try {\n      return JSON.parse(value);\n    } catch (error) {\n      return undefined;\n    }\n  }\n\n}\n/**\r\n * Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way.\r\n */\n\n\nclass StringStorageTranscoder {\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  encode(value) {\n    return value;\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n\n\n  decode(value) {\n    return value;\n  }\n\n}\n/**\r\n * Transcoder that encodes/decodes `boolean` values.\r\n */\n\n\nclass BooleanStorageTranscoder {\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  encode(value) {\n    return value.toString();\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n\n\n  decode(value) {\n    if (value === 'true') {\n      return true;\n    }\n\n    if (value === 'false') {\n      return false;\n    }\n\n    return undefined;\n  }\n\n}\n/**\r\n * Transcoder that encodes/decodes `number` values.\r\n */\n\n\nclass NumberStorageTranscoder {\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  encode(value) {\n    return value.toString();\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n\n\n  decode(value) {\n    /** @type {?} */\n    const parsedNumber = Number(value);\n    return Number.isFinite(parsedNumber) ? parsedNumber : undefined;\n  }\n\n}\n/**\r\n * Transcoder that encodes/decodes `Date` values to ISO strings.\r\n */\n\n\nclass DateIsoStorageTranscoder {\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  encode(value) {\n    return value.toISOString();\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n\n\n  decode(value) {\n    /** @type {?} */\n    const timestamp = Date.parse(value);\n    return isNaN(timestamp) ? undefined : new Date(timestamp);\n  }\n\n}\n/**\r\n * Transcoder that encodes/decodes `Date` values to epoch timestamps.\r\n */\n\n\nclass DateEpochStorageTranscoder {\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n  encode(value) {\n    return value.valueOf().toString();\n  }\n  /**\r\n   * @param {?} value\r\n   * @return {?}\r\n   */\n\n\n  decode(value) {\n    /** @type {?} */\n    const timestamp = parseInt(value, 10);\n    return isNaN(timestamp) ? undefined : new Date(timestamp);\n  }\n\n}\n/**\r\n * A set of storage transcoders.\r\n * @type {?}\r\n */\n\n\nconst StorageTranscoders = {\n  /**\r\n   * Transcoder that encodes values as JSON strings.\r\n   */\n  JSON:\n  /** @type {?} */\n  new JsonStorageTranscoder(),\n\n  /**\r\n   * Transcoder that encodes/decodes strings **as is**, i.e. values are not modified in any way.\r\n   */\n  STRING:\n  /** @type {?} */\n  new StringStorageTranscoder(),\n\n  /**\r\n   * Transcoder that encodes/decodes `boolean` values.\r\n   */\n  BOOLEAN:\n  /** @type {?} */\n  new BooleanStorageTranscoder(),\n\n  /**\r\n   * Transcoder that encodes/decodes `number` values.\r\n   */\n  NUMBER:\n  /** @type {?} */\n  new NumberStorageTranscoder(),\n\n  /**\r\n   * Transcoder that encodes/decodes `Date` values into ISO strings.\r\n   */\n  DATE_ISO_STRING:\n  /** @type {?} */\n  new DateIsoStorageTranscoder(),\n\n  /**\r\n   * Transcoder that encodes/decodes `Date` values into epoch timestamps.\r\n   */\n  DATE_EPOCH_TIME:\n  /** @type {?} */\n  new DateEpochStorageTranscoder()\n};\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * A volatile `StorageService` implementation. This service guarantees that data stored will remain available as long as the application\r\n * instance is active. After the application is terminated all data will be lost.\r\n */\n\nclass InMemoryStorageService extends BaseStorageService {\n  /**\r\n   * Creates a new `InMemoryStorageService` instance.\r\n   */\n  constructor() {\n    super(StorageTranscoders.JSON);\n    /**\r\n     * A map that serves as the underlying backing storage for this service.\r\n     */\n\n    this.storage = new Map();\n  }\n  /**\r\n   * Checks whether an entry with the specified key exists in the storage.\r\n   *\r\n   * @param {?} key Identifier of the entry for which its presence in the storage is to be checked.\r\n   * @return {?} `true` if an entry with the specified key exists in the storage, `false` if not.\r\n   */\n\n\n  has(key) {\n    return this.storage.has(key);\n  }\n  /**\r\n   * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\r\n   * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\r\n   *\r\n   * @param {?} key Identifier of the entry which is to be removed.\r\n   * @return {?}\r\n   */\n\n\n  remove(key) {\n    this.storage.delete(key);\n  }\n  /**\r\n   * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\r\n   * for key *x*.\r\n   * @return {?}\r\n   */\n\n\n  clear() {\n    this.storage.clear();\n  }\n  /**\r\n   * Performs the actual retrieval of a value from storage.\r\n   *\r\n   * @protected\r\n   * @param {?} key Identifier of the entry whose value is to be retrieved.\r\n   * @return {?} The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\r\n   */\n\n\n  getItem(key) {\n    if (!this.storage.has(key)) {\n      return undefined;\n    }\n\n    return (\n      /** @type {?} */\n      this.storage.get(key)\n    );\n  }\n  /**\r\n   * Stores the provided value using specified key in the storage.\r\n   *\r\n   * @protected\r\n   * @param {?} key   Identifier of the entry for which the value is to be stored.\r\n   * @param {?} value The value that is to be stored.\r\n   * @return {?}\r\n   */\n\n\n  setItem(key, value) {\n    this.storage.set(key, value);\n  }\n\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * An implementation of `StorageService` interface that uses an underlying (web) `Storage` object, such as `localStorage` and\r\n * `sessionStorage`, as backing data store. This class basically wraps the `Storage` object so it can be accessed through the\r\n * `StorageService` interface.\r\n */\n\n\nclass WebStorageService extends BaseStorageService {\n  /**\r\n   * Creates a new `WebStorageService` instance that uses the specified (web) storage object as underlying backing storage.\r\n   *\r\n   * @param {?} storage Storage object which is to be wrapped in a class that implements the `StorageService` interface.\r\n   */\n  constructor(storage) {\n    super(StorageTranscoders.JSON);\n    this.storage = storage;\n  }\n  /**\r\n   * Checks whether an entry with the specified key exists in the storage.\r\n   *\r\n   * @param {?} key Identifier of the entry for which its presence in the storage is to be checked.\r\n   * @return {?} `true` if an entry with the specified key exists in the storage, `false` if not.\r\n   */\n\n\n  has(key) {\n    return this.storage.getItem(key) !== null;\n  }\n  /**\r\n   * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\r\n   * Attempting to retrieve an entry via the `get` method after it has been removed will result in `undefined`.\r\n   *\r\n   * @param {?} key Identifier of the entry which is to be removed.\r\n   * @return {?}\r\n   */\n\n\n  remove(key) {\n    this.storage.removeItem(key);\n  }\n  /**\r\n   * Clears the storage by removing all entries. Subsequent `get(x)` calls for a key *x* will return `undefined`, until a new value is set\r\n   * for key *x*.\r\n   * @return {?}\r\n   */\n\n\n  clear() {\n    this.storage.clear();\n  }\n  /**\r\n   * Performs the actual retrieval of a value from storage.\r\n   *\r\n   * @protected\r\n   * @param {?} key Identifier of the entry whose value is to be retrieved.\r\n   * @return {?} The value that is stored for the specified entry or `undefined` if no entry exists for the specified key.\r\n   */\n\n\n  getItem(key) {\n    /** @type {?} */\n    const value = this.storage.getItem(key);\n    return value !== null ? value : undefined;\n  }\n  /**\r\n   * Stores the provided value using specified key in the storage.\r\n   *\r\n   * @protected\r\n   * @param {?} key   Identifier of the entry for which the value is to be stored.\r\n   * @param {?} value The value that is to be stored.\r\n   * @return {?}\r\n   */\n\n\n  setItem(key, value) {\n    return this.storage.setItem(key, value);\n  }\n\n}\n/**\r\n * Checks whether the specified (web) storage is available and functional. This might not be the case for older browsers. However even\r\n * certain browsers that do support the web storage API can, under some circumstances, have non functional storage objects. For example,\r\n * Safari is known to have `localStorage` and `sessionStorage` throw exceptions in private mode.\r\n *\r\n * @param {?} storage Storage object which is to be tested for availability.\r\n * @return {?} `true` if the specified storage can be used, `false` if not.\r\n */\n\n\nfunction isStorageAvailable(storage) {\n  // Check if storage is available.\n  if (!storage) {\n    return false;\n  } // Check if the storage can actually be accessed.\n\n\n  try {\n    /** @type {?} */\n    const now = Date.now();\n    /** @type {?} */\n\n    const testItemKey = `storage-test-entry-${now}`;\n    /** @type {?} */\n\n    const testItemValue = `storage-test-value-${now}`;\n    storage.setItem(testItemKey, testItemValue);\n    /** @type {?} */\n\n    const retrievedItemValue = storage.getItem(testItemKey);\n    storage.removeItem(testItemKey);\n    return retrievedItemValue === testItemValue;\n  } catch (error) {\n    return false;\n  }\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @return {?}\r\n */\n\n\nfunction sessionStorageFactory() {\n  try {\n    if (\n    /** @type {?} */\n    typeof sessionStorage !== 'undefined' && isStorageAvailable(sessionStorage)) {\n      return new WebStorageService(sessionStorage);\n    }\n  } catch (_a) {}\n\n  return new InMemoryStorageService();\n}\n/**\r\n * Injection token for the session storage service.\r\n * @type {?}\r\n */\n\n\nconst SESSION_STORAGE = new InjectionToken('SESSION_STORAGE', {\n  providedIn: 'root',\n  factory: sessionStorageFactory\n});\n/**\r\n * @return {?}\r\n */\n\nfunction localStorageFactory() {\n  try {\n    if (\n    /** @type {?} */\n    typeof localStorage !== 'undefined' && isStorageAvailable(localStorage)) {\n      return new WebStorageService(localStorage);\n    }\n  } catch (_a) {}\n\n  return new InMemoryStorageService();\n}\n/**\r\n * Injection token for the local storage service.\r\n * @type {?}\r\n */\n\n\nconst LOCAL_STORAGE = new InjectionToken('LOCAL_STORAGE', {\n  providedIn: 'root',\n  factory: localStorageFactory\n});\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @deprecated You no longer need to import the `StorageServiceModule`, since the `SESSION_STORAGE` and `LOCAL_STORAGE` injection tokens are\r\n * now 'self providing' in the root injector.\r\n */\n\nlet StorageServiceModule = /*#__PURE__*/(() => {\n  class StorageServiceModule {}\n\n  StorageServiceModule.Éµfac = function StorageServiceModule_Factory(t) {\n    return new (t || StorageServiceModule)();\n  };\n\n  StorageServiceModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n    type: StorageServiceModule\n  });\n  StorageServiceModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({});\n  return StorageServiceModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { BaseStorageService, InMemoryStorageService, ProxyStorageService, sessionStorageFactory, localStorageFactory, SESSION_STORAGE, LOCAL_STORAGE, StorageServiceModule, JsonStorageTranscoder, StringStorageTranscoder, BooleanStorageTranscoder, NumberStorageTranscoder, DateIsoStorageTranscoder, DateEpochStorageTranscoder, StorageTranscoders, isStorageAvailable, WebStorageService }; //# sourceMappingURL=ngx-webstorage-service.js.map","map":null,"metadata":{},"sourceType":"module"}